<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PasswordAuthenticationMethodSSHNet</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PasswordAuthenticationMethodSSHNet extends AuthenticationMethodSSHNet
{
    private UserName username;
    private Password password;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PasswordAuthenticationMethodSSHNet construct(UserName _username, Password _password)
    {
        PasswordAuthenticationMethodSSHNet res;

        res = new PasswordAuthenticationMethodSSHNet();
        res.parmPassword(_password);
        res.parmUsername(_username);

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPassword</Name>
				<Source><![CDATA[
    public Password parmPassword(Password _password = password)
    {
        password = _password;

        return password;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserName</Name>
				<Source><![CDATA[
    public UserName parmUserName(UserName _username = username)
    {
        username = _username;

        return username;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMethod</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>
    public Renci.SshNet.AuthenticationMethod getMethod()
    {
        InteropPermission interopPermission;

        interopPermission = new InteropPermission(InteropKind::ClrInterop);
        interopPermission.assert();

        Renci.SshNet.AuthenticationMethod ret;
    
        ret = new Renci.SshNet.PasswordAuthenticationMethod(this.parmUserName(), this.parmPassword());

        CodeAccessPermission::RevertAssert();
    
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>